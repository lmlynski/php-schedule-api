# This file is the entry point to configure your own services.
# Files in the packages/ subdirectory configure your dependencies.

# Put parameters here that don't need to change on each machine where the app is deployed
# https://symfony.com/doc/current/best_practices/configuration.html#application-related-configuration
parameters:
    task_read_repository_type: filesystem
#    task_read_repository_type: mysql
#    task_read_repository_type: memory
    task_write_repository_type: filesystem
#    task_write_repository_type: mysql
#    task_write_repository_type: memory
    filesystem_db_dir: '%kernel.project_dir%/data/db.json'

services:
    # default configuration for services in *this* file
    _defaults:
        autowire: true      # Automatically injects dependencies in your services.
        autoconfigure: true # Automatically registers your services as commands, event subscribers, etc.

    # makes classes in src/ available to be used as services
    # this creates a service per class whose id is the fully-qualified class name
    App\:
        resource: '../src/'
        exclude:
            - '../src/DependencyInjection/'
            - '../src/Entity/'
            - '../src/Kernel.php'
            - '../src/Tests/'

    # controllers are imported separately to make sure services can be injected
    # as action arguments even if you don't extend any base controller class
    App\UI\Http\:
        resource: '../src/UI/Http'
        tags: ['controller.service_arguments']

    kernel.event_listener:
        class: App\Common\Event\ConsoleExceptionListener
        tags:
            - { name: kernel.event_listener, event: console.error }

    App\Common\Event\HttpExceptionEventListener:
        tags:
            - { name: kernel.event_listener, event: kernel.exception, priority: 400, method: onKernelException}

    App\Common\Response\Resolver\ErrorResponseBuilderResolver:
        calls:
            - ['addBuilder', ['@App\Common\Response\ValidationErrorResponseBuilder']]
            - ['addBuilder', ['@App\Common\Response\NotFoundErrorResponseBuilder']]
            - ['addBuilder', ['@App\Common\Response\InternalServerErrorResponseBuilder']]

    App\Infrastructure\Repository\Task\Resolver\TaskReadRepositoryResolver:
        arguments:
            $type: '%task_read_repository_type%'
        calls:
            - ['addRepository', ['@App\Infrastructure\Repository\Task\FilesystemTaskRepository']]
            - ['addRepository', ['@App\Infrastructure\Repository\Task\MysqlTaskRepository']]
            - ['addRepository', ['@App\Infrastructure\Repository\Task\InMemoryTaskRepository']]

    App\Infrastructure\Repository\Task\Resolver\TaskWriteRepositoryResolver:
        arguments:
            $type: '%task_write_repository_type%'
        calls:
            - ['addRepository', ['@App\Infrastructure\Repository\Task\FilesystemTaskRepository']]
            - ['addRepository', ['@App\Infrastructure\Repository\Task\MysqlTaskRepository']]
            - ['addRepository', ['@App\Infrastructure\Repository\Task\InMemoryTaskRepository']]

    App\Infrastructure\Repository\Task\InMemoryTaskRepository:
        calls:
            - ['setExampleData']

    App\Infrastructure\Repository\Task\MysqlTaskRepository:
        arguments:
            $entityManager: '@doctrine.orm.entity_manager'

    App\Infrastructure\Repository\Task\FilesystemTaskRepository:
        arguments:
            $dbFile: '%filesystem_db_dir%'

    App\Common\CommandBus:
        calls:
            - ['registerHandler', ['App\Application\Task\Command\AddTaskCommand', '@App\Application\Task\Command\AddTaskCommandHandler']]
            - ['registerHandler', ['App\Application\Task\Command\ChangeTaskStatusCommand', '@App\Application\Task\Command\ChangeTaskStatusCommandHandler']]

